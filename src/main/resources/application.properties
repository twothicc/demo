spring.datasource.url=jdbc:sqlserver://localhost:1433;databaseName=demo;encrypt=true;TrustServerCertificate=true
# The username is the login, not the user
# Note: You must go to the mssql server properties > security > select SQL server and Windows Authentication mode
# in order to allow password login
spring.datasource.username=demoUser
spring.datasource.password=demo_pass
spring.datasource.driver-class-name=com.microsoft.sqlserver.jdbc.SQLServerDriver
# Setting ddl-auto to update will tell the JDBC driver's API to get the database metadata, then compare with
# the object model that Hibernate creates based on your annotated classes to adjust the schema on-the-fly
# Typically set to none in production, and create-drop in development
spring.jpa.hibernate.ddl-auto=update

# Hibernate supports 2 naming strategies, physical naming strategy and implicit naming strategy
# The ImplicitNamingStrategyJpaCompliantImpl derives the logical name to be the same as the Java class & property names
# @Table and @Column annotations can be used to explicitly specify the logical name
# By default, the PhysicalNamingStrategy will use logical names to be exactly the same as the Java class & property
# names. However, we can create a custom PhysicalNamingStrategy class as shown here:
# https://www.baeldung.com/hibernate-naming-strategy#physical_name
spring.jpa.hibernate.naming.implicit-strategy=org.hibernate.boot.model.naming.ImplicitNamingStrategyJpaCompliantImpl

# show-sql and format_sql tells Hibernate to pretty-print sql queries to stdout and does not log the params
# of prepared statements.
# However this is not recommended as it logs everything. A logger should be used instead.
spring.jpa.show-sql=true
spring.jpa.properties.hibernate.format_sql=true

# The dialect specifies the type of database used in Hibernate so that it can generate the appropriate type of
# SQL statements.
spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.SQLServerDialect

